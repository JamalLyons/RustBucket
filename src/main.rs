//! A simple virtual machine implementation with an assembler.
//! This program demonstrates how to create and run a basic virtual machine
//! that can execute assembly-like instructions.

mod assembler;
mod vm;

use assembler::Assembler;
use vm::cpu::CPU;
use vm::VMConfig;

fn main()
{
    // Create VM configuration with 256 bytes of memory and debug output enabled
    let config = VMConfig::new(256, true);

    // Create a new Virtual Machine instance with our configuration
    let mut vm = CPU::new(config);

    // This is our test program written in our custom assembly language
    // Each line is an instruction that our VM will execute
    let assembly_code = r#"
        ; Initialize values
        MOV r0, 5        ; Load value 5 into register 0
        MOV r1, 3        ; Load value 3 into register 1
        
        ; Perform basic arithmetic: Add r1 to r0
        ADD r0, r1       ; r0 = r0 + r1 (result: 8)
        OUT r0           ; Print the value in r0 (should print 8)
        
        ; Demonstrate memory operations
        STORE r0, 0x50   ; Store the value from r0 into memory address 0x50
        LOAD r3, 0x50    ; Load the value from memory address 0x50 into r3
        OUT r3           ; Print the value in r3 (should print 8)

        HALT            ; Stop the program
    "#;

    println!("Running test program");
    println!("Expected outputs: 8, 8, 8\n");

    // Create an assembler and convert our assembly code into bytecode
    let mut assembler = Assembler::new();
    match assembler.assemble(assembly_code) {
        Ok(bytecode) => {
            // Successfully created bytecode - show it and run it
            println!("Generated bytecode: {:02X?}", bytecode);
            vm.load_program(&bytecode);

            // Execute the program
            match vm.run() {
                Ok(_) => println!("\nProgram completed successfully"),
                Err(e) => {
                    eprintln!("\nProgram failed during execution: {}", e);
                    vm.dump_state(); // Print VM state for debugging
                }
            }
        }
        Err(e) => {
            // Assembly failed - show error and debug information
            eprintln!("\nAssembly failed: {}", e);
            eprintln!("\nLabel addresses:");
            for (label, addr) in assembler.labels() {
                eprintln!("{}: 0x{:02X}", label, addr);
            }
        }
    }
}
